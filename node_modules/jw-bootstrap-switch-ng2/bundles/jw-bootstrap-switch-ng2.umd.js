(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@angular/forms'),exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('jw-bootstrap-switch-ng2', ['@angular/core','@angular/common','@angular/forms','exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory(global.ng.core,global.ng.common,global.ng.forms,(global['jw-bootstrap-switch-ng2'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports,core,forms,common) { 
var _c0 = ["container"];
var _c1 = ["on"];
var _c2 = ["label"];
var _c3 = ["off"];
'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var callback = function () {
    };
    /** @type {?} */
    var CUSTOM_INPUT = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return JwBootstrapSwitchNg2Component; }),
        multi: true
    };
    var JwBootstrapSwitchNg2Component = /** @class */ (function () {
        function JwBootstrapSwitchNg2Component(cd, render) {
            this.cd = cd;
            this.render = render;
            // Defining Default Options for Switch
            this.handleWidth = 0;
            this.labelWidth = 0;
            this.labelText = '';
            this.inverse = false;
            this.baseClass = 'bootstrap-switch';
            this.onText = 'ON';
            this.offText = 'OFF';
            this.disabled = false;
            this.readonly = false;
            this._focused = false;
            this._size = 'normal';
            this._animate = true;
            this._innerAnimate = true;
            this._indeterminate = false;
            this._onColor = 'primary';
            this._offColor = 'default';
            this._wrapperClass = 'wrapper';
            this._innerState = false;
            this._innerHandleWidth = 'auto';
            this._innerLabelWidth = 'auto';
            this._dragStart = null;
            this._dragEnd = null;
            this._onTouchedCallback = callback;
            this._onChangeCallback = callback;
            this.changeState = new core.EventEmitter();
        }
        /**
         * @private
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.$on = /**
         * @private
         * @return {?}
         */
            function () {
                return this.on.nativeElement;
            };
        /**
         * @private
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.$off = /**
         * @private
         * @return {?}
         */
            function () {
                return this.off.nativeElement;
            };
        /**
         * @private
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.$label = /**
         * @private
         * @return {?}
         */
            function () {
                return this.label.nativeElement;
            };
        /**
         * @private
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.$container = /**
         * @private
         * @return {?}
         */
            function () {
                return this.container.nativeElement;
            };
        /**
         * @description:  Function to set the Classes for the Wrapper Div
         * @returns string
         */
        /**
         * \@description: Function to set the Classes for the Wrapper Div
         * @return {?} string
         */
        JwBootstrapSwitchNg2Component.prototype.getWrapperClasses = /**
         * \@description: Function to set the Classes for the Wrapper Div
         * @return {?} string
         */
            function () {
                /** @type {?} */
                var output = this.baseClass + ' ' + this.baseClass + '-' + this._wrapperClass;
                if (this._focused) {
                    output += ' ' + this.baseClass + '-focused';
                }
                if (this.readonly) {
                    output += ' ' + this.baseClass + '-readonly';
                }
                if (this._size != null) {
                    output += ' ' + this.baseClass + '-' + this._size;
                }
                if (this._innerState) {
                    output += ' ' + this.baseClass + '-on';
                }
                else {
                    output += ' ' + this.baseClass + '-off';
                }
                if (this._animate) {
                    output += ' ' + this.baseClass + '-animate';
                }
                if (this.disabled) {
                    output += ' ' + this.baseClass + '-disabled';
                }
                if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
                    output += ' ' + this.baseClass + '-indeterminate';
                }
                if (this.inverse) {
                    output += ' ' + this.baseClass + '-inverse';
                }
                return output;
            };
        /**
         * @description Function to set the css classes for #on
         * @returns string
         */
        /**
         * \@description Function to set the css classes for #on
         * @return {?} string
         */
        JwBootstrapSwitchNg2Component.prototype.getOnClasses = /**
         * \@description Function to set the css classes for #on
         * @return {?} string
         */
            function () {
                /** @type {?} */
                var output = this.baseClass + '-handle-on';
                if (this._onColor) {
                    output += ' ' + this.baseClass + '-' + this._onColor;
                }
                return output;
            };
        /**
         * @description Function to set the css classes for #off
         * @returns string
         */
        /**
         * \@description Function to set the css classes for #off
         * @return {?} string
         */
        JwBootstrapSwitchNg2Component.prototype.getOffClasses = /**
         * \@description Function to set the css classes for #off
         * @return {?} string
         */
            function () {
                /** @type {?} */
                var output = this.baseClass + '-handle-off';
                if (this._offColor) {
                    output += ' ' + this.baseClass + '-' + this._offColor;
                }
                return output;
            };
        /**
         * @description  Function set the marging of the #label when change the state
         * @returns string
         */
        /**
         * \@description Function set the marging of the #label when change the state
         * @return {?} string
         */
        JwBootstrapSwitchNg2Component.prototype.getLabelMarginLeft = /**
         * \@description Function set the marging of the #label when change the state
         * @return {?} string
         */
            function () {
                /** @type {?} */
                var width = (this.inverse) ? -this.handleWidth : 0;
                if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
                    width = -(this.handleWidth / 2);
                }
                else if (this._dragEnd) {
                    width = this._dragEnd;
                }
                else if (!this._innerState) {
                    if (!this.inverse) {
                        width = -this.handleWidth;
                    }
                    else {
                        width = 0;
                    }
                }
                return width + 'px';
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['setLabelText'] ||
                    changes['setOnText'] ||
                    changes['setHandleWidth'] ||
                    changes['setLabelWidth'] ||
                    changes['setOffText'] ||
                    changes['setSize']) {
                    this.calculateWith(true);
                }
            };
        /**
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.calculateWith();
            };
        /**
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (!this.disabled && !this.readonly && !this._dragEnd) {
                    this.setStateValue(!this._innerState);
                }
                else if (this._dragEnd) {
                    this._dragEnd = null;
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!e.which || this.disabled || this.readonly) {
                    return;
                }
                switch (e.which) {
                    case 37:
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        this.setStateValue(false);
                        break;
                    case 39:
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        this.setStateValue(true);
                        break;
                }
            };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onDragStart = /**
         * @private
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e.target === this.$label()) {
                    if (this._dragStart || this.disabled || this.readonly) {
                        return;
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    this._dragStart = (e.pageX || e.touches[0].pageX) - parseInt(this.$container().style.marginLeft, 10);
                    if (this._animate) {
                        this._animate = !this._animate;
                    }
                }
            };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onDragMove = /**
         * @private
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this._dragStart) {
                    e.preventDefault();
                    /** @type {?} */
                    var difference = (e.pageX || e.touches[0].pageX) - this._dragStart;
                    if (difference < -Number(this.handleWidth) || difference > 0) {
                        return;
                    }
                    this._dragEnd = difference;
                }
            };
        /**
         * @private
         * @param {?} e
         * @param {?=} removeDragEnd
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onDragEnd = /**
         * @private
         * @param {?} e
         * @param {?=} removeDragEnd
         * @return {?}
         */
            function (e, removeDragEnd) {
                if (removeDragEnd === void 0) {
                    removeDragEnd = false;
                }
                if (this._dragStart) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (this._dragEnd) {
                        /** @type {?} */
                        var state = this._dragEnd > -(Number(this.handleWidth) / 2);
                        this.setStateValue((this.inverse) ? !state : state);
                    }
                    this._dragStart = null;
                    if (removeDragEnd) {
                        this._dragEnd = null;
                    }
                    if (this._innerAnimate) {
                        this._animate = true;
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onTouchStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragStart(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onMouseDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragStart(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onTouchMove = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragMove(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onMouseMove = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragMove(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onMouseUp = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragEnd(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onTouchEnd = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragEnd(e, true);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onMouseLeave = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onDragEnd(e, true);
            };
        /**
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onFocus = /**
         * @return {?}
         */
            function () {
                this._focused = true;
            };
        /**
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                this._focused = false;
                this._onTouchedCallback();
            };
        /**
         * @description Function to make recalculate the size of the elements when options change
         * @param disableAnimation
         */
        /**
         * \@description Function to make recalculate the size of the elements when options change
         * @private
         * @param {?=} disableAnimation
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.calculateWith = /**
         * \@description Function to make recalculate the size of the elements when options change
         * @private
         * @param {?=} disableAnimation
         * @return {?}
         */
            function (disableAnimation) {
                var _this = this;
                if (disableAnimation === void 0) {
                    disableAnimation = false;
                }
                if (disableAnimation && this._innerAnimate) {
                    this._animate = false;
                }
                setTimeout(function () {
                    _this.render.setStyle(_this.$on(), 'width', 'auto');
                    _this.render.setStyle(_this.$off(), 'width', 'auto');
                    _this.render.setStyle(_this.$label(), 'width', 'auto');
                    /** @type {?} */
                    var width = (_this._innerHandleWidth === 'auto')
                        ? Math.max(_this.$on().offsetWidth, _this.$off().offsetWidth)
                        : _this._innerHandleWidth;
                    if (_this.$label().offsetWidth < width) {
                        if (_this._innerLabelWidth === 'auto') {
                            _this.labelWidth = Number(width);
                        }
                        else {
                            _this.labelWidth = Number(_this._innerLabelWidth);
                        }
                    }
                    else {
                        if (_this._innerLabelWidth === 'auto') {
                            _this.labelWidth = _this.$label().offsetWidth;
                        }
                        else {
                            _this.labelWidth = Number(_this._innerLabelWidth);
                        }
                    }
                    _this.handleWidth = Number(width);
                    _this.render.setStyle(_this.$label(), 'width', _this.labelWidth + 'px');
                    _this.render.setStyle(_this.$on(), 'width', _this.handleWidth + 'px');
                    _this.render.setStyle(_this.$off(), 'width', _this.handleWidth + 'px');
                    setTimeout(function () {
                        if (disableAnimation && _this._innerAnimate) {
                            _this._animate = true;
                        }
                    });
                    _this.cd.markForCheck();
                });
            };
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setBaseClass", {
            // Functions to set inputs and the private variables of the Switch
            set: 
            // Functions to set inputs and the private variables of the Switch
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.baseClass = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setWrapperClass", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._wrapperClass = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffText", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.offText = (value) ? value : 'OFF';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelText", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.labelText = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnText", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.onText = (value) ? value : 'ON';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setSize", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._size = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setAnimate", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._animate = value;
                this._innerAnimate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnColor", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._onColor = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffColor", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._offColor = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setDisabled", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.disabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setReadOnly", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.readonly = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setIndeterminate", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._indeterminate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setInverse", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.inverse = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setHandleWidth", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._innerHandleWidth = (typeof (value) !== 'undefined') ? value : 'auto';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelWidth", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._innerLabelWidth = (typeof (value) !== 'undefined') ? value : 'auto';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._innerState;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                if (v === null || typeof v === 'undefined') {
                    this._indeterminate = true;
                }
                this.setStateValue(v);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} v
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.setStateValue = /**
         * @private
         * @param {?} v
         * @return {?}
         */
            function (v) {
                if (v !== this._innerState) {
                    this._onChangeCallback(v);
                    this.changeState.emit({
                        previousValue: this._innerState,
                        currentValue: v
                    });
                    this._innerState = v;
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this._innerState) {
                    this._innerState = value;
                    this.cd.markForCheck();
                }
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChangeCallback = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        JwBootstrapSwitchNg2Component.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouchedCallback = fn;
            };
        /** @nocollapse */
        JwBootstrapSwitchNg2Component.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: core.Renderer2 }
            ];
        };
        JwBootstrapSwitchNg2Component.propDecorators = {
            changeState: [{ type: core.Output }],
            container: [{ type: core.ViewChild, args: ['container',] }],
            on: [{ type: core.ViewChild, args: ['on',] }],
            label: [{ type: core.ViewChild, args: ['label',] }],
            off: [{ type: core.ViewChild, args: ['off',] }],
            onClick: [{ type: core.HostListener, args: ['click',] }],
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }],
            onTouchStart: [{ type: core.HostListener, args: ['touchstart', ['$event'],] }],
            onMouseDown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }],
            onTouchMove: [{ type: core.HostListener, args: ['touchmove', ['$event'],] }],
            onMouseMove: [{ type: core.HostListener, args: ['mousemove', ['$event'],] }],
            onMouseUp: [{ type: core.HostListener, args: ['mouseup', ['$event'],] }],
            onTouchEnd: [{ type: core.HostListener, args: ['touchend', ['$event'],] }],
            onMouseLeave: [{ type: core.HostListener, args: ['mouseleave', ['$event'],] }],
            setBaseClass: [{ type: core.Input, args: ['switch-base-class',] }],
            setWrapperClass: [{ type: core.Input, args: ['switch-wrapper-class',] }],
            setOffText: [{ type: core.Input, args: ['switch-off-text',] }],
            setLabelText: [{ type: core.Input, args: ['switch-label-text',] }],
            setOnText: [{ type: core.Input, args: ['switch-on-text',] }],
            setSize: [{ type: core.Input, args: ['switch-size',] }],
            setAnimate: [{ type: core.Input, args: ['switch-animate',] }],
            setOnColor: [{ type: core.Input, args: ['switch-on-color',] }],
            setOffColor: [{ type: core.Input, args: ['switch-off-color',] }],
            setDisabled: [{ type: core.Input, args: ['switch-disabled',] }],
            setReadOnly: [{ type: core.Input, args: ['switch-readonly',] }],
            setIndeterminate: [{ type: core.Input, args: ['switch-indeterminate',] }],
            setInverse: [{ type: core.Input, args: ['switch-inverse',] }],
            setHandleWidth: [{ type: core.Input, args: ['switch-handle-width',] }],
            setLabelWidth: [{ type: core.Input, args: ['switch-label-width',] }]
        };
JwBootstrapSwitchNg2Component.ɵfac = function JwBootstrapSwitchNg2Component_Factory(t) { return new (t || JwBootstrapSwitchNg2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
JwBootstrapSwitchNg2Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: JwBootstrapSwitchNg2Component, selectors: [["bSwitch"]], viewQuery: function JwBootstrapSwitchNg2Component_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.on = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.off = _t.first);
    } }, hostBindings: function JwBootstrapSwitchNg2Component_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function JwBootstrapSwitchNg2Component_click_HostBindingHandler() { return ctx.onClick(); })("keydown", function JwBootstrapSwitchNg2Component_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })("touchstart", function JwBootstrapSwitchNg2Component_touchstart_HostBindingHandler($event) { return ctx.onTouchStart($event); })("mousedown", function JwBootstrapSwitchNg2Component_mousedown_HostBindingHandler($event) { return ctx.onMouseDown($event); })("touchmove", function JwBootstrapSwitchNg2Component_touchmove_HostBindingHandler($event) { return ctx.onTouchMove($event); })("mousemove", function JwBootstrapSwitchNg2Component_mousemove_HostBindingHandler($event) { return ctx.onMouseMove($event); })("mouseup", function JwBootstrapSwitchNg2Component_mouseup_HostBindingHandler($event) { return ctx.onMouseUp($event); })("touchend", function JwBootstrapSwitchNg2Component_touchend_HostBindingHandler($event) { return ctx.onTouchEnd($event); })("mouseleave", function JwBootstrapSwitchNg2Component_mouseleave_HostBindingHandler($event) { return ctx.onMouseLeave($event); });
    } }, inputs: { setBaseClass: ["switch-base-class", "setBaseClass"], setWrapperClass: ["switch-wrapper-class", "setWrapperClass"], setOffText: ["switch-off-text", "setOffText"], setLabelText: ["switch-label-text", "setLabelText"], setOnText: ["switch-on-text", "setOnText"], setSize: ["switch-size", "setSize"], setAnimate: ["switch-animate", "setAnimate"], setOnColor: ["switch-on-color", "setOnColor"], setOffColor: ["switch-off-color", "setOffColor"], setDisabled: ["switch-disabled", "setDisabled"], setReadOnly: ["switch-readonly", "setReadOnly"], setIndeterminate: ["switch-indeterminate", "setIndeterminate"], setInverse: ["switch-inverse", "setInverse"], setHandleWidth: ["switch-handle-width", "setHandleWidth"], setLabelWidth: ["switch-label-width", "setLabelWidth"] }, outputs: { changeState: "changeState" }, features: [ɵngcc0.ɵɵProvidersFeature([CUSTOM_INPUT]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 17, consts: [[3, "ngClass"], ["container", ""], [3, "innerHTML", "ngClass"], ["on", ""], ["label", ""], ["off", ""], ["type", "checkbox", 3, "ngModel", "readonly", "disabled", "ngModelChange", "focus", "blur"]], template: function JwBootstrapSwitchNg2Component_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 0, 1);
        ɵngcc0.ɵɵelement(3, "span", 2, 3);
        ɵngcc0.ɵɵelementStart(5, "span", 0, 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "span", 2, 5);
        ɵngcc0.ɵɵelementStart(10, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function JwBootstrapSwitchNg2Component_Template_input_ngModelChange_10_listener($event) { return ctx.value = $event; })("focus", function JwBootstrapSwitchNg2Component_Template_input_focus_10_listener() { return ctx.onFocus(); })("blur", function JwBootstrapSwitchNg2Component_Template_input_blur_10_listener() { return ctx.onBlur(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.handleWidth + ctx.labelWidth + "px");
        ɵngcc0.ɵɵproperty("ngClass", ctx.getWrapperClasses());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.handleWidth * 2 + ctx.labelWidth + "px")("margin-left", ctx.getLabelMarginLeft());
        ɵngcc0.ɵɵproperty("ngClass", ctx.baseClass + "-container");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.inverse ? ctx.offText : ctx.onText, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ctx.inverse ? ctx.getOffClasses() : ctx.getOnClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.baseClass + "-label");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("\u00A0", ctx.labelText, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.inverse ? ctx.onText : ctx.offText, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ctx.inverse ? ctx.getOnClasses() : ctx.getOffClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value)("readonly", ctx.readonly)("disabled", ctx.disabled);
    } }, directives: [ɵngcc1.NgClass, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwBootstrapSwitchNg2Component, [{
        type: core.Component,
        args: [{
                selector: 'bSwitch',
                providers: [CUSTOM_INPUT],
                template: "\n      <div [ngClass]=\"getWrapperClasses()\" [style.width]=\"(handleWidth  + labelWidth ) +'px'\">\n          <div #container [ngClass]=\"baseClass + '-container'\"\n               [style.width]=\"((handleWidth * 2) + labelWidth) +'px'\"\n               [style.margin-left]=\"getLabelMarginLeft()\"><!--\n              --><span #on [innerHTML]=\"(inverse) ? offText : onText\"\n                [ngClass]=\"(inverse) ? getOffClasses() : getOnClasses()\"></span><!--\n              --><span #label [ngClass]=\"baseClass + '-label'\">&nbsp;{{ labelText }}</span><!--\n              --><span #off [innerHTML]=\"(inverse) ? onText : offText\"\n                [ngClass]=\"(inverse) ? getOnClasses() : getOffClasses()\"></span><!--\n              --><input type=\"checkbox\" [(ngModel)]=\"value\" [readonly]=\"readonly\" [disabled]=\"disabled\"\n                     (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n          </div>\n      </div>"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }]; }, { changeState: [{
            type: core.Output
        }], onClick: [{
            type: core.HostListener,
            args: ['click']
        }], onKeyDown: [{
            type: core.HostListener,
            args: ['keydown', ['$event']]
        }], onTouchStart: [{
            type: core.HostListener,
            args: ['touchstart', ['$event']]
        }], onMouseDown: [{
            type: core.HostListener,
            args: ['mousedown', ['$event']]
        }], onTouchMove: [{
            type: core.HostListener,
            args: ['touchmove', ['$event']]
        }], onMouseMove: [{
            type: core.HostListener,
            args: ['mousemove', ['$event']]
        }], onMouseUp: [{
            type: core.HostListener,
            args: ['mouseup', ['$event']]
        }], onTouchEnd: [{
            type: core.HostListener,
            args: ['touchend', ['$event']]
        }], onMouseLeave: [{
            type: core.HostListener,
            args: ['mouseleave', ['$event']]
        }], setBaseClass: [{
            type: core.Input,
            args: ['switch-base-class']
        }], setWrapperClass: [{
            type: core.Input,
            args: ['switch-wrapper-class']
        }], setOffText: [{
            type: core.Input,
            args: ['switch-off-text']
        }], setLabelText: [{
            type: core.Input,
            args: ['switch-label-text']
        }], setOnText: [{
            type: core.Input,
            args: ['switch-on-text']
        }], setSize: [{
            type: core.Input,
            args: ['switch-size']
        }], setAnimate: [{
            type: core.Input,
            args: ['switch-animate']
        }], setOnColor: [{
            type: core.Input,
            args: ['switch-on-color']
        }], setOffColor: [{
            type: core.Input,
            args: ['switch-off-color']
        }], setDisabled: [{
            type: core.Input,
            args: ['switch-disabled']
        }], setReadOnly: [{
            type: core.Input,
            args: ['switch-readonly']
        }], setIndeterminate: [{
            type: core.Input,
            args: ['switch-indeterminate']
        }], setInverse: [{
            type: core.Input,
            args: ['switch-inverse']
        }], setHandleWidth: [{
            type: core.Input,
            args: ['switch-handle-width']
        }], setLabelWidth: [{
            type: core.Input,
            args: ['switch-label-width']
        }], container: [{
            type: core.ViewChild,
            args: ['container']
        }], on: [{
            type: core.ViewChild,
            args: ['on']
        }], label: [{
            type: core.ViewChild,
            args: ['label']
        }], off: [{
            type: core.ViewChild,
            args: ['off']
        }] }); })();
        return JwBootstrapSwitchNg2Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var JwBootstrapSwitchNg2Module = /** @class */ (function () {
        function JwBootstrapSwitchNg2Module() {
        }
JwBootstrapSwitchNg2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: JwBootstrapSwitchNg2Module });
JwBootstrapSwitchNg2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function JwBootstrapSwitchNg2Module_Factory(t) { return new (t || JwBootstrapSwitchNg2Module)(); }, imports: [[
            common.CommonModule,
            forms.FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(JwBootstrapSwitchNg2Module, { declarations: [JwBootstrapSwitchNg2Component], imports: [ɵngcc1.CommonModule, ɵngcc2.FormsModule], exports: [JwBootstrapSwitchNg2Component] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwBootstrapSwitchNg2Module, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule
                ],
                declarations: [JwBootstrapSwitchNg2Component],
                exports: [JwBootstrapSwitchNg2Component]
            }]
    }], function () { return []; }, null); })();
        return JwBootstrapSwitchNg2Module;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.JwBootstrapSwitchNg2Component = JwBootstrapSwitchNg2Component;
    exports.JwBootstrapSwitchNg2Module = JwBootstrapSwitchNg2Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianctYm9vdHN0cmFwLXN3aXRjaC1uZzIudW1kLmpzIiwic291cmNlcyI6WyJqdy1ib290c3RyYXAtc3dpdGNoLW5nMi9saWIvanctYm9vdHN0cmFwLXN3aXRjaC1uZzIuY29tcG9uZW50LnRzIiwianctYm9vdHN0cmFwLXN3aXRjaC1uZzIvbGliL2p3LWJvb3RzdHJhcC1zd2l0Y2gtbmcyLm1vZHVsZS50cyJdLCJuYW1lcyI6WyJOR19WQUxVRV9BQ0NFU1NPUiIsImZvcndhcmRSZWYiLCJFdmVudEVtaXR0ZXIiLCJDb21wb25lbnQiLCJDaGFuZ2VEZXRlY3RvclJlZiIsIlJlbmRlcmVyMiIsIk91dHB1dCIsIlZpZXdDaGlsZCIsIkhvc3RMaXN0ZW5lciIsIklucHV0IiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiLCJGb3Jtc01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDWSxRQW1CTixRQUFRLEdBQUc7QUFHZixJQUZGLENBQUM7QUFDRDtBQUNvQixRQUFkLFlBQVksR0FBUTtBQUMxQixRQUFJLE9BQU8sRUFBRUEsdUJBQWlCO0FBQzlCLFFBQUksV0FBVyxFQUFFQyxlQUFVLENBQUMsY0FBTSxPQUFBLDZCQUE2QixHQUFBLENBQUM7QUFDaEUsUUFBSSxLQUFLLEVBQUUsSUFBSTtBQUNmLEtBQUM7QUFFRDtBQUdBLFFBaUtJLHVDQUFvQixFQUFxQixFQUFVLE1BQWlCO0FBQ3hFLFlBRHdCLE9BQUUsR0FBRixFQUFFLENBQW1CO0FBQUMsWUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUM7QUFHaEMsWUFsSjlCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO0FBQ25DLFlBQVcsZUFBVSxHQUFXLENBQUMsQ0FBQztBQUNsQyxZQUFXLGNBQVMsR0FBVyxFQUFFLENBQUM7QUFDbEMsWUFBVyxZQUFPLEdBQVksS0FBSyxDQUFDO0FBQ3BDLFlBQVcsY0FBUyxHQUFXLGtCQUFrQixDQUFDO0FBQ2xELFlBQVcsV0FBTSxHQUFXLElBQUksQ0FBQztB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Qyw2QkFBNkIsQ0FBQyxzQkFDekM7Ozs7Ozs7Ozs7O2dEQUNhO0FBQUMsUUFBMkIsaUNBQUM7QUFDMUMsS0FEMEM7QUFDdkM7QUFBQztBQUFRO0FBQXNDO0FBQXlHO0FBQVE7QUFBQztBQUFRO0FBQXNDO0FBQXlHO0FBQVE7QUFBQztBQUEyRTtBQUFxRTtBQUFDO0FBQW1FO0FBQUM7O0FEZEEsQUFvQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQVosQUFBQSxBQUNBLEFBQUEsQUFBQUMsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQW9LQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUEvSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUFDLEFBQUEsQUFBQSxBQUFBLEFBb0hBLEFBM0dBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQU1BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQU1BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFNQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBdUNBLEFBdkNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVBBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQTNiQUMsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFhQSxBQUNBLEFBakNBQyxBQUFBLEFBREFDLEFBQUEsQUFrRUFDLEFBQUEsQUFJQUMsQUFBQSxBQUFBLEFBQUEsQUFDQUEsQUFBQSxBQUFBLEFBQUEsQUFDQUEsQUFBQSxBQUFBLEFBQUEsQUFDQUEsQUFBQSxBQUFBLEFBQUEsQUE4SEFDLEFBQUEsQUFBQSxBQUFBLEFBUUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUE4REFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUEyREFDLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBTUFBLEFBQUEsQUFBQSxBQUFBLEFBS0FBLEFBQUEsQUFBQSxBQUFBLEFBTUFBLEFBQUEsQUFBQSxBQUFBLEFBTUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBSUFBLEFBQUEsQUFBQSxBQUFBLEFBK0NBLEFBQUEsQUFBQSxBQzFkQSxBQUtBLEFBUUEsQUFSQUMsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0FDLEFBQUEsQUFDQUMsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIElucHV0LFxyXG4gICAgT3V0cHV0LFxyXG4gICAgSG9zdExpc3RlbmVyLFxyXG4gICAgQWZ0ZXJWaWV3SW5pdCxcclxuICAgIGZvcndhcmRSZWYsXHJcbiAgICBTaW1wbGVDaGFuZ2VzLFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgT25DaGFuZ2VzLFxyXG4gICAgUmVuZGVyZXIyLFxyXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIENvbnRyb2xWYWx1ZUFjY2Vzc29yLFxyXG4gICAgTkdfVkFMVUVfQUNDRVNTT1JcclxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5jb25zdCBjYWxsYmFjayA9ICgpID0+IHtcclxufTtcclxuXHJcbmNvbnN0IENVU1RPTV9JTlBVVDogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBKd0Jvb3RzdHJhcFN3aXRjaE5nMkNvbXBvbmVudCksXHJcbiAgICBtdWx0aTogdHJ1ZVxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2JTd2l0Y2gnLFxyXG4gICAgcHJvdmlkZXJzOiBbQ1VTVE9NX0lOUFVUXSxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgIDxkaXYgW25nQ2xhc3NdPVwiZ2V0V3JhcHBlckNsYXNzZXMoKVwiIFtzdHlsZS53aWR0aF09XCIoaGFuZGxlV2lkdGggICsgbGFiZWxXaWR0aCApICsncHgnXCI+XHJcbiAgICAgICAgICA8ZGl2ICNjb250YWluZXIgW25nQ2xhc3NdPVwiYmFzZUNsYXNzICsgJy1jb250YWluZXInXCJcclxuICAgICAgICAgICAgICAgW3N0eWxlLndpZHRoXT1cIigoaGFuZGxlV2lkdGggKiAyKSArIGxhYmVsV2lkdGgpICsncHgnXCJcclxuICAgICAgICAgICAgICAgW3N0eWxlLm1hcmdpbi1sZWZ0XT1cImdldExhYmVsTWFyZ2luTGVmdCgpXCI+PCEtLVxyXG4gICAgICAgICAgICAgIC0tPjxzcGFuICNvbiBbaW5uZXJIVE1MXT1cIihpbnZlcnNlKSA/IG9mZlRleHQgOiBvblRleHRcIlxyXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiKGludmVyc2UpID8gZ2V0T2ZmQ2xhc3NlcygpIDogZ2V0T25DbGFzc2VzKClcIj48L3NwYW4+PCEtLVxyXG4gICAgICAgICAgICAgIC0tPjxzcGFuICNsYWJlbCBbbmdDbGFzc109XCJiYXNlQ2xhc3MgKyAnLWxhYmVsJ1wiPiZuYnNwO3t7IGxhYmVsVGV4dCB9fTwvc3Bhbj48IS0tXHJcbiAgICAgICAgICAgICAgLS0+PHNwYW4gI29mZiBbaW5uZXJIVE1MXT1cIihpbnZlcnNlKSA/IG9uVGV4dCA6IG9mZlRleHRcIlxyXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiKGludmVyc2UpID8gZ2V0T25DbGFzc2VzKCkgOiBnZXRPZmZDbGFzc2VzKClcIj48L3NwYW4+PCEtLVxyXG4gICAgICAgICAgICAgIC0tPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbKG5nTW9kZWwpXT1cInZhbHVlXCIgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCIgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoKVwiIChibHVyKT1cIm9uQmx1cigpXCI+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+YFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIEp3Qm9vdHN0cmFwU3dpdGNoTmcyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcyB7XHJcbiAgICAvLyBEZWZpbmluZyBEZWZhdWx0IE9wdGlvbnMgZm9yIFN3aXRjaFxyXG4gICAgcHVibGljIGhhbmRsZVdpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGxhYmVsV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgbGFiZWxUZXh0OiBzdHJpbmcgPSAnJztcclxuICAgIHB1YmxpYyBpbnZlcnNlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgYmFzZUNsYXNzOiBzdHJpbmcgPSAnYm9vdHN0cmFwLXN3aXRjaCc7XHJcbiAgICBwdWJsaWMgb25UZXh0OiBzdHJpbmcgPSAnT04nO1xyXG4gICAgcHVibGljIG9mZlRleHQ6IHN0cmluZyA9ICdPRkYnO1xyXG4gICAgcHVibGljIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9mb2N1c2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9zaXplOiBhbnkgPSAnbm9ybWFsJztcclxuICAgIHByaXZhdGUgX2FuaW1hdGU6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJBbmltYXRlOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2luZGV0ZXJtaW5hdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX29uQ29sb3I6IHN0cmluZyA9ICdwcmltYXJ5JztcclxuICAgIHByaXZhdGUgX29mZkNvbG9yOiBzdHJpbmcgPSAnZGVmYXVsdCc7XHJcbiAgICBwcml2YXRlIF93cmFwcGVyQ2xhc3M6IHN0cmluZyA9ICd3cmFwcGVyJztcclxuICAgIHByaXZhdGUgX2lubmVyU3RhdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2lubmVySGFuZGxlV2lkdGg6IHN0cmluZyB8IG51bWJlciA9ICdhdXRvJztcclxuICAgIHByaXZhdGUgX2lubmVyTGFiZWxXaWR0aDogc3RyaW5nIHwgbnVtYmVyID0gJ2F1dG8nO1xyXG5cclxuICAgIHByaXZhdGUgX2RyYWdTdGFydDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2RyYWdFbmQ6IGFueSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBjYWxsYmFjaztcclxuICAgIHByaXZhdGUgX29uQ2hhbmdlQ2FsbGJhY2s6IChfOiBhbnkpID0+IHZvaWQgPSBjYWxsYmFjaztcclxuXHJcbiAgICBAT3V0cHV0KCkgY2hhbmdlU3RhdGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG5cclxuICAgIC8vIERlZmluaW5nIERPTSBFbGVtZW50c1xyXG4gICAgQFZpZXdDaGlsZCgnY29udGFpbmVyJykgY29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnb24nKSBvbjogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2xhYmVsJykgbGFiZWw6IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdvZmYnKSBvZmY6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgcHJpdmF0ZSAkb24oKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vbi5uYXRpdmVFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgJG9mZigpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9mZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgJGxhYmVsKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWwubmF0aXZlRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlICRjb250YWluZXIoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbjogIEZ1bmN0aW9uIHRvIHNldCB0aGUgQ2xhc3NlcyBmb3IgdGhlIFdyYXBwZXIgRGl2XHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFdyYXBwZXJDbGFzc2VzKCkge1xyXG4gICAgICAgIGxldCBvdXRwdXQ6IHN0cmluZyA9IHRoaXMuYmFzZUNsYXNzICsgJyAnICsgdGhpcy5iYXNlQ2xhc3MgKyAnLScgKyB0aGlzLl93cmFwcGVyQ2xhc3M7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnICcgKyB0aGlzLmJhc2VDbGFzcyArICctZm9jdXNlZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJlYWRvbmx5KSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnICcgKyB0aGlzLmJhc2VDbGFzcyArICctcmVhZG9ubHknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NpemUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJyAnICsgdGhpcy5iYXNlQ2xhc3MgKyAnLScgKyB0aGlzLl9zaXplO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lubmVyU3RhdGUpIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICcgJyArIHRoaXMuYmFzZUNsYXNzICsgJy1vbic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICcgJyArIHRoaXMuYmFzZUNsYXNzICsgJy1vZmYnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGUpIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICcgJyArIHRoaXMuYmFzZUNsYXNzICsgJy1hbmltYXRlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnICcgKyB0aGlzLmJhc2VDbGFzcyArICctZGlzYWJsZWQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2luZGV0ZXJtaW5hdGUgfHwgdGhpcy5faW5uZXJTdGF0ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5faW5uZXJTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICcgJyArIHRoaXMuYmFzZUNsYXNzICsgJy1pbmRldGVybWluYXRlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmludmVyc2UpIHtcclxuICAgICAgICAgICAgb3V0cHV0ICs9ICcgJyArIHRoaXMuYmFzZUNsYXNzICsgJy1pbnZlcnNlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBGdW5jdGlvbiB0byBzZXQgdGhlIGNzcyBjbGFzc2VzIGZvciAjb25cclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0T25DbGFzc2VzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG91dHB1dDogc3RyaW5nID0gdGhpcy5iYXNlQ2xhc3MgKyAnLWhhbmRsZS1vbic7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vbkNvbG9yKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnICcgKyB0aGlzLmJhc2VDbGFzcyArICctJyArIHRoaXMuX29uQ29sb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3NzIGNsYXNzZXMgZm9yICNvZmZcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0T2ZmQ2xhc3NlcygpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBvdXRwdXQ6IHN0cmluZyA9IHRoaXMuYmFzZUNsYXNzICsgJy1oYW5kbGUtb2ZmJztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29mZkNvbG9yKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCArPSAnICcgKyB0aGlzLmJhc2VDbGFzcyArICctJyArIHRoaXMuX29mZkNvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAgRnVuY3Rpb24gc2V0IHRoZSBtYXJnaW5nIG9mIHRoZSAjbGFiZWwgd2hlbiBjaGFuZ2UgdGhlIHN0YXRlXHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldExhYmVsTWFyZ2luTGVmdCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB3aWR0aCA9ICh0aGlzLmludmVyc2UpID8gLXRoaXMuaGFuZGxlV2lkdGggOiAwO1xyXG4gICAgICAgIGlmICh0aGlzLl9pbmRldGVybWluYXRlIHx8IHRoaXMuX2lubmVyU3RhdGUgPT09IG51bGwgfHwgdHlwZW9mIHRoaXMuX2lubmVyU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gLSh0aGlzLmhhbmRsZVdpZHRoIC8gMik7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kcmFnRW5kKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fZHJhZ0VuZDtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pbm5lclN0YXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IC10aGlzLmhhbmRsZVdpZHRoO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aWR0aCArICdweCc7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3NldExhYmVsVGV4dCddIHx8XHJcbiAgICAgICAgICAgIGNoYW5nZXNbJ3NldE9uVGV4dCddIHx8XHJcbiAgICAgICAgICAgIGNoYW5nZXNbJ3NldEhhbmRsZVdpZHRoJ10gfHxcclxuICAgICAgICAgICAgY2hhbmdlc1snc2V0TGFiZWxXaWR0aCddIHx8XHJcbiAgICAgICAgICAgIGNoYW5nZXNbJ3NldE9mZlRleHQnXSB8fFxyXG4gICAgICAgICAgICBjaGFuZ2VzWydzZXRTaXplJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVXaXRoKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVXaXRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBvbkNsaWNrKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiAhdGhpcy5yZWFkb25seSAmJiAhdGhpcy5fZHJhZ0VuZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlVmFsdWUoIXRoaXMuX2lubmVyU3RhdGUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fZHJhZ0VuZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnRW5kID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCFlLndoaWNoIHx8IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xyXG4gICAgICAgICAgICBjYXNlIDM3OlxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGVWYWx1ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOTpcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlVmFsdWUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnU3RhcnQoZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLiRsYWJlbCgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU3RhcnQgfHwgdGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRvbmx5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU3RhcnQgPSAoZS5wYWdlWCB8fCBlLnRvdWNoZXNbMF0ucGFnZVgpIC0gcGFyc2VJbnQodGhpcy4kY29udGFpbmVyKCkuc3R5bGUubWFyZ2luTGVmdCwgMTApO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZSA9ICF0aGlzLl9hbmltYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnTW92ZShlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZHJhZ1N0YXJ0KSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IChlLnBhZ2VYIHx8IGUudG91Y2hlc1swXS5wYWdlWCkgLSB0aGlzLl9kcmFnU3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlIDwgLU51bWJlcih0aGlzLmhhbmRsZVdpZHRoKSB8fCBkaWZmZXJlbmNlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdFbmQgPSBkaWZmZXJlbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ0VuZChlOiBFdmVudCwgcmVtb3ZlRHJhZ0VuZDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdTdGFydCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnRW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2RyYWdFbmQgPiAtKE51bWJlcih0aGlzLmhhbmRsZVdpZHRoKSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZVZhbHVlKCh0aGlzLmludmVyc2UpID8gIXN0YXRlIDogc3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVEcmFnRW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnRW5kID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5uZXJBbmltYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgWyckZXZlbnQnXSkgb25Ub3VjaFN0YXJ0KGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMub25EcmFnU3RhcnQoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJywgWyckZXZlbnQnXSkgb25Nb3VzZURvd24oZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5vbkRyYWdTdGFydChlKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaG1vdmUnLCBbJyRldmVudCddKSBvblRvdWNoTW92ZShlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLm9uRHJhZ01vdmUoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2Vtb3ZlJywgWyckZXZlbnQnXSkgb25Nb3VzZU1vdmUoZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5vbkRyYWdNb3ZlKGUpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNldXAnLCBbJyRldmVudCddKSBvbk1vdXNlVXAoZTogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uRHJhZ0VuZChlKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaGVuZCcsIFsnJGV2ZW50J10pIG9uVG91Y2hFbmQoZTogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uRHJhZ0VuZChlLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJywgWyckZXZlbnQnXSkgb25Nb3VzZUxlYXZlKGU6IEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5vbkRyYWdFbmQoZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Gb2N1cygpIHtcclxuICAgICAgICB0aGlzLl9mb2N1c2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJsdXIoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX29uVG91Y2hlZENhbGxiYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gdG8gbWFrZSByZWNhbGN1bGF0ZSB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudHMgd2hlbiBvcHRpb25zIGNoYW5nZVxyXG4gICAgICogQHBhcmFtIGRpc2FibGVBbmltYXRpb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVXaXRoKGRpc2FibGVBbmltYXRpb246IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChkaXNhYmxlQW5pbWF0aW9uICYmIHRoaXMuX2lubmVyQW5pbWF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLiRvbigpLCAnd2lkdGgnLCAnYXV0bycpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLiRvZmYoKSwgJ3dpZHRoJywgJ2F1dG8nKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy4kbGFiZWwoKSwgJ3dpZHRoJywgJ2F1dG8nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gKHRoaXMuX2lubmVySGFuZGxlV2lkdGggPT09ICdhdXRvJylcclxuICAgICAgICAgICAgICAgID8gTWF0aC5tYXgodGhpcy4kb24oKS5vZmZzZXRXaWR0aCwgdGhpcy4kb2ZmKCkub2Zmc2V0V2lkdGgpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX2lubmVySGFuZGxlV2lkdGg7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy4kbGFiZWwoKS5vZmZzZXRXaWR0aCA8IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5uZXJMYWJlbFdpZHRoID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhYmVsV2lkdGggPSBOdW1iZXIod2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhYmVsV2lkdGggPSBOdW1iZXIodGhpcy5faW5uZXJMYWJlbFdpZHRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbm5lckxhYmVsV2lkdGggPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFiZWxXaWR0aCA9IHRoaXMuJGxhYmVsKCkub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFiZWxXaWR0aCA9IE51bWJlcih0aGlzLl9pbm5lckxhYmVsV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVdpZHRoID0gTnVtYmVyKHdpZHRoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuJGxhYmVsKCksICd3aWR0aCcsIHRoaXMubGFiZWxXaWR0aCArICdweCcpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLiRvbigpLCAnd2lkdGgnLCB0aGlzLmhhbmRsZVdpZHRoICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuJG9mZigpLCAnd2lkdGgnLCB0aGlzLmhhbmRsZVdpZHRoICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc2FibGVBbmltYXRpb24gJiYgdGhpcy5faW5uZXJBbmltYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZ1bmN0aW9ucyB0byBzZXQgaW5wdXRzIGFuZCB0aGUgcHJpdmF0ZSB2YXJpYWJsZXMgb2YgdGhlIFN3aXRjaFxyXG4gICAgQElucHV0KCdzd2l0Y2gtYmFzZS1jbGFzcycpIHNldCBzZXRCYXNlQ2xhc3ModmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuYmFzZUNsYXNzID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtd3JhcHBlci1jbGFzcycpIHNldCBzZXRXcmFwcGVyQ2xhc3ModmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3dyYXBwZXJDbGFzcyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgnc3dpdGNoLW9mZi10ZXh0Jykgc2V0IHNldE9mZlRleHQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMub2ZmVGV4dCA9ICh2YWx1ZSkgPyB2YWx1ZSA6ICdPRkYnO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgnc3dpdGNoLWxhYmVsLXRleHQnKSBzZXQgc2V0TGFiZWxUZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgnc3dpdGNoLW9uLXRleHQnKSBzZXQgc2V0T25UZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLm9uVGV4dCA9ICh2YWx1ZSkgPyB2YWx1ZSA6ICdPTic7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtc2l6ZScpIHNldCBzZXRTaXplKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoJ3N3aXRjaC1hbmltYXRlJykgc2V0IHNldEFuaW1hdGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9hbmltYXRlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5faW5uZXJBbmltYXRlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtb24tY29sb3InKSBzZXQgc2V0T25Db2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ29sb3IgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtb2ZmLWNvbG9yJykgc2V0IHNldE9mZkNvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fb2ZmQ29sb3IgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtZGlzYWJsZWQnKSBzZXQgc2V0RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtcmVhZG9ubHknKSBzZXQgc2V0UmVhZE9ubHkodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnJlYWRvbmx5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtaW5kZXRlcm1pbmF0ZScpIHNldCBzZXRJbmRldGVybWluYXRlKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgnc3dpdGNoLWludmVyc2UnKSBzZXQgc2V0SW52ZXJzZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuaW52ZXJzZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgnc3dpdGNoLWhhbmRsZS13aWR0aCcpIHNldCBzZXRIYW5kbGVXaWR0aCh2YWx1ZTogbnVtYmVyIHwgJ2F1dG8nKSB7XHJcbiAgICAgICAgdGhpcy5faW5uZXJIYW5kbGVXaWR0aCA9ICh0eXBlb2YgKHZhbHVlKSAhPT0gJ3VuZGVmaW5lZCcpID8gdmFsdWUgOiAnYXV0byc7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdzd2l0Y2gtbGFiZWwtd2lkdGgnKSBzZXQgc2V0TGFiZWxXaWR0aCh2YWx1ZTogbnVtYmVyIHwgJ2F1dG8nKSB7XHJcbiAgICAgICAgdGhpcy5faW5uZXJMYWJlbFdpZHRoID0gKHR5cGVvZiAodmFsdWUpICE9PSAndW5kZWZpbmVkJykgPyB2YWx1ZSA6ICdhdXRvJztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFsdWUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHZhbHVlKHY6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB0eXBlb2YgdiA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGVWYWx1ZSh2KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFN0YXRlVmFsdWUodjogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh2ICE9PSB0aGlzLl9pbm5lclN0YXRlKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKHYpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZS5lbWl0KHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWU6IHRoaXMuX2lubmVyU3RhdGUsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWU6IHZcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lubmVyU3RhdGUgPSB2O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl9pbm5lclN0YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lubmVyU3RhdGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBKd0Jvb3RzdHJhcFN3aXRjaE5nMkNvbXBvbmVudCB9IGZyb20gJy4vanctYm9vdHN0cmFwLXN3aXRjaC1uZzIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtKd0Jvb3RzdHJhcFN3aXRjaE5nMkNvbXBvbmVudF0sXHJcbiAgZXhwb3J0czogW0p3Qm9vdHN0cmFwU3dpdGNoTmcyQ29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSndCb290c3RyYXBTd2l0Y2hOZzJNb2R1bGUgeyB9XHJcbiJdfQ==